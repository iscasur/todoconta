---
// src/pages/servicio-debug/[slug].astro
import { getCollection } from 'astro:content';

// Genera rutas para cada servicio
export async function getStaticPaths() {
  try {
    const services = await getCollection('services');
    console.log('Services collection found:', services.length, 'items');
    
    return services.map(service => ({
      params: { slug: service.slug },
      props: { 
        service,
        error: null,
        debug: {
          slug: service.slug,
          dataKeys: Object.keys(service.data),
          hasTitle: !!service.data.title,
          hasDescription: !!service.data.description,
          hasPrice: !!service.data.monthlyPrice,
          collectionLength: services.length
        } 
      }
    }));
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [
      {
        params: { slug: 'error' },
        props: { 
          service: null,
          error: {
            message: error.message,
            stack: error.stack
          },
          debug: {
            error: true
          }
        }
      }
    ];
  }
}

const { service, error, debug } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Página de Diagnóstico</title>
  <style>
    body {
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      padding: 2rem;
      max-width: 800px;
      margin: 0 auto;
    }
    
    h1 {
      border-bottom: 2px solid #eee;
      padding-bottom: 0.5rem;
    }
    
    .debug-section {
      background: #f5f5f5;
      padding: 1rem;
      border-radius: 0.5rem;
      margin: 1rem 0;
    }
    
    .error {
      background: #fff0f0;
      color: #c00;
      padding: 1rem;
      border-radius: 0.5rem;
      border-left: 4px solid #c00;
      margin: 1rem 0;
    }
    
    .data-display {
      background: #f0f8ff;
      padding: 1rem;
      border-radius: 0.5rem;
      margin: 1rem 0;
      overflow: auto;
    }
    
    code {
      font-family: monospace;
      background: #eee;
      padding: 0.2rem 0.4rem;
      border-radius: 0.3rem;
    }
    
    .paths {
      margin: 1rem 0;
    }
    
    .paths-list {
      list-style: none;
      padding: 0;
    }
    
    .paths-list li {
      margin: 0.5rem 0;
      padding: 0.5rem;
      background: #f0f0f0;
      border-radius: 0.3rem;
    }
    
    .status {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      font-size: 0.8rem;
      font-weight: bold;
    }
    
    .status-ok {
      background: #d4edda;
      color: #155724;
    }
    
    .status-error {
      background: #f8d7da;
      color: #721c24;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 1rem 0;
    }
    
    table, th, td {
      border: 1px solid #ddd;
    }
    
    th, td {
      padding: 0.5rem;
      text-align: left;
    }
    
    th {
      background: #f5f5f5;
    }
  </style>
</head>
<body>
  <h1>Página de Diagnóstico para Servicios</h1>
  
  {error && (
    <div class="error">
      <h2>Error encontrado:</h2>
      <p><strong>Mensaje:</strong> {error.message}</p>
      <pre>{error.stack}</pre>
    </div>
  )}
  
  <div class="debug-section">
    <h2>Información de Depuración</h2>
    
    <div class="paths">
      <h3>Ruta actual:</h3>
      <code>{Astro.url.pathname}</code>
      
      <h3>Parámetro slug:</h3>
      <code>{Astro.params.slug}</code>
    </div>
    
    {debug && (
      <div>
        <h3>Detalles del Debug:</h3>
        <table>
          {Object.entries(debug).map(([key, value]) => (
            <tr>
              <td><strong>{key}</strong></td>
              <td>
                {typeof value === 'object' 
                  ? JSON.stringify(value) 
                  : String(value)}
              </td>
            </tr>
          ))}
        </table>
      </div>
    )}
  </div>
  
  {service ? (
    <div class="data-display">
      <h2>Datos del Servicio</h2>
      <p><strong>Slug:</strong> {service.slug}</p>
      
      <h3>Propiedades encontradas:</h3>
      <ul>
        {Object.entries(service.data).map(([key, value]) => (
          <li>
            <strong>{key}:</strong> {
              typeof value === 'object' 
                ? JSON.stringify(value) 
                : String(value)
            }
          </li>
        ))}
      </ul>
      
      <h3>Renderizado Básico:</h3>
      <div style="border: 1px solid #ddd; padding: 1rem; margin-top: 1rem;">
        <h1>{service.data.title || 'Título no encontrado'}</h1>
        <p>{service.data.description || 'Descripción no encontrada'}</p>
        
        {service.data.monthlyPrice && (
          <p><strong>Precio:</strong> ${service.data.monthlyPrice}</p>
        )}
        
        {service.data.includedFeatures && service.data.includedFeatures.length > 0 && (
          <div>
            <h3>Características incluidas:</h3>
            <ul>
              {service.data.includedFeatures.map(feature => (
                <li>{feature.icon} {feature.text}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  ) : (
    <div class="error">
      <h2>No se pudo cargar el servicio</h2>
      <p>No se encontraron datos para el slug: <code>{Astro.params.slug}</code></p>
    </div>
  )}
  
  <div class="debug-section">
    <h3>Acciones para solucionar problemas:</h3>
    <ol>
      <li>Verifica que el archivo de servicio existe en <code>src/content/services/{Astro.params.slug}.md</code></li>
      <li>Comprueba que la colección 'services' está correctamente definida en <code>src/content/config.ts</code></li>
      <li>Asegúrate de que los datos del servicio cumplen con el esquema definido</li>
      <li>Verifica las rutas y la estructura de carpetas del proyecto</li>
    </ol>
    
    <p><a href="/servicio-debug">Ver todos los servicios disponibles</a></p>
  </div>
</body>
</html>