---
import { getCollection, getEntry } from 'astro:content';
import InfoLayout from '../../layouts/InfoLayout.astro';
import InfoHero from '../../components/info/InfoHero.astro';
import TableOfContents from '../../components/info/TableOfContents.astro';
import InfoSection from '../../components/info/InfoSection.astro';
import RequirementsList from '../../components/info/RequirementsList.astro';
import Timeline from '../../components/info/Timeline.astro';
import InfoFAQ from '../../components/info/InfoFAQ.astro';
import RelatedContent from '../../components/info/RelatedContent.astro';
import Downloadables from '../../components/info/Downloadables.astro';
import AuthorInfo from '../../components/info/AuthorInfo.astro';
import InfoCTA from '../../components/info/InfoCTA.astro';

// Genera rutas para cada página informativa
export async function getStaticPaths() {
  const infoPages = await getCollection('info');
  
  return infoPages.map(page => ({
    params: { slug: page.slug },
    props: { page }
  }));
}

// Función para obtener contenido relacionado
async function getRelatedContent(relatedSlugs, collection) {
  if (!relatedSlugs || relatedSlugs.length === 0) return [];
  
  const relatedContent = [];
  for (const slug of relatedSlugs) {
    try {
      const entry = await getEntry(collection, slug);
      if (entry) {
        relatedContent.push({
          title: entry.data.title,
          description: entry.data.description,
          slug: entry.slug,
          image: entry.data.heroImage
        });
      }
    } catch (error) {
      console.error(`Error getting related content for slug ${slug}:`, error);
    }
  }
  
  return relatedContent;
}

const { page } = Astro.props;
const { 
  title, 
  description, 
  lastUpdated,
  heroImage,
  badge,
  seoKeywords,
  mainCta,
  secondaryCta,
  toc,
  sections,
  requirements,
  timeline,
  faqs,
  relatedServices,
  relatedInfo,
  downloadables,
  authorInfo
} = page.data;

// Obtener contenido relacionado
const relatedServiceItems = await getRelatedContent(relatedServices, 'services');
const relatedInfoItems = await getRelatedContent(relatedInfo, 'info');

// Generar IDs para las secciones (para la tabla de contenidos)
const sectionsWithIds = sections.map((section, index) => ({
  ...section,
  id: `section-${index + 1}`,
  index: index + 1
}));
---

<InfoLayout 
  title={title} 
  description={description}
  keywords={seoKeywords}
  lastUpdated={lastUpdated}
>
  <!-- Hero Section -->
  <InfoHero
    title={title}
    description={description}
    badge={badge}
    image={heroImage}
    lastUpdated={lastUpdated}
    mainCta={mainCta}
    secondaryCta={secondaryCta}
  />
  
  <div class="info-container">
    <div class="info-content-wrapper">
      <!-- Sidebar with Table of Contents -->
      {toc && (
        <aside class="info-sidebar">
          <div class="sticky-sidebar">
            <TableOfContents sections={sectionsWithIds} />
            
            {authorInfo && (
              <div class="sidebar-author-card">
                <AuthorInfo author={authorInfo} />
              </div>
            )}
            
            {downloadables && downloadables.length > 0 && (
              <div class="sidebar-downloads">
                <h3>Descargas útiles</h3>
                <ul class="sidebar-download-list">
                  {downloadables.map(item => (
                    <li>
                      <a href={item.fileUrl} class="download-link">
                        <span class="download-icon">{item.fileType === 'PDF' ? '📄' : '📊'}</span>
                        <span class="download-title">{item.title}</span>
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </aside>
      )}
      
      <!-- Main Content -->
      <main class="info-main-content">
        <!-- Content Sections -->
        {sectionsWithIds.map(section => (
          <InfoSection
            id={section.id}
            title={section.title}
            content={section.content}
            image={section.image}
            callout={section.callout}
            index={section.index}
          />
        ))}
        
        <!-- Requirements List -->
        {requirements && requirements.length > 0 && (
          <RequirementsList requirements={requirements} />
        )}
        
        <!-- Timeline -->
        {timeline && timeline.length > 0 && (
          <Timeline steps={timeline} />
        )}
        
        <!-- FAQ Section -->
        {faqs && faqs.length > 0 && (
          <InfoFAQ faqs={faqs} />
        )}
        
        <!-- Downloadables Section -->
        {downloadables && downloadables.length > 0 && (
          <Downloadables items={downloadables} />
        )}
        
        <!-- Author Info (Mobile) -->
        {authorInfo && (
          <div class="author-mobile">
            <AuthorInfo author={authorInfo} />
          </div>
        )}
        
        <!-- Call to Action -->
        <InfoCTA
          title={mainCta ? mainCta.text : "¿Necesitas ayuda con este trámite?"}
          description="Nuestros expertos pueden asesorarte y realizar el trámite por ti."
          ctaUrl={mainCta ? mainCta.url : "/contacto"}
          ctaText={mainCta ? mainCta.text : "Solicitar asesoría"}
        />
        
        <!-- Related Content -->
        {(relatedServiceItems.length > 0 || relatedInfoItems.length > 0) && (
          <RelatedContent 
            services={relatedServiceItems}
            infoPages={relatedInfoItems}
          />
        )}
      </main>
    </div>
  </div>
</InfoLayout>