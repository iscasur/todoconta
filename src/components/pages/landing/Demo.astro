---
export interface Props {
  title?: string;
  subtitle?: string;
  formId: string;
  bgColor?: string;
  buttonColor?: string;
  fields?: Array<{
    name: string;
    type: 'text' | 'email' | 'tel' | 'password' | 'number';
    placeholder: string;
    required: boolean;
  }>;
}

const {
  title = 'Prueba Gratis',
  subtitle = 'Descarga la versión de prueba con todas las funciones activadas',
  formId,
  bgColor = 'var(--neutral-100)',
  buttonColor = 'var(--color-primary)',
  fields = [
    {
      name: 'name',
      type: 'text',
      placeholder: 'Nombre completo',
      required: true,
    },
    {
      name: 'email',
      type: 'email',
      placeholder: 'Correo electrónico',
      required: true,
    },
    {
      name: 'Company',
      type: 'text',
      placeholder: 'Empresa (opcional)',
      required: false,
    },
  ],
} = Astro.props;
---

<section
  class="demo-section"
  id="demo"
  style={`--demo-bg-color: ${bgColor}; --demo-button-color: ${buttonColor};`}
>
  <div class="container">
    <div class="demo-content">
      <div class="section-header">
        <h2 class="section-title animate-fade-in-up">{title}</h2>
        <p class="section-subtitle animate-fade-in-up delay-100">{subtitle}</p>
      </div>

      <form
        class="demo-form animate-fade-in-up delay-200"
        action="https://sendy.todoconta.com/subscribe"
        method="POST"
        id={formId}
      >
        <input type="hidden" name="list" value={formId} />

        {
          fields.map((field, _index) => (
            <div class="form-group">
              <input
                type={field.type}
                name={field.name}
                class="form-input"
                placeholder={field.placeholder}
                required={field.required}
              />
            </div>
          ))
        }

        <div class="form-group">
          <button type="submit" class="form-button">Descargar Demo</button>
        </div>
      </form>

      <p class="form-disclaimer animate-fade-in-up delay-300">
        Al descargar, aceptas recibir información sobre actualizaciones y
        ofertas especiales. Puedes darte de baja en cualquier momento.
      </p>
    </div>
  </div>
</section>

<script
  is:inline
  define:vars={{
    formId,
    apiKey: import.meta.env.PUBLIC_SENDY_API_KEY,
  }}
>
  // Variables passed from Astro context via define:vars
  // @ts-ignore - formId and apiKey are defined by Astro's define:vars
  
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById(formId);

    if (form) {
      form.addEventListener('submit', async function (e) {
        e.preventDefault();

        // Recolectar datos del formulario
        const formData = new FormData(form);

        // Crear mensaje de éxito
        const successMessage = document.createElement('div');
        successMessage.className = 'success-message';
        successMessage.style.cssText = `
          background: var(--color-primary-light);
          color: white;
          padding: 1rem;
          border-radius: 0.5rem;
          text-align: center;
          margin-top: 1rem;
          font-weight: 600;
        `;

        // Crear mensaje de error
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.style.cssText = `
          background: #ef4444;
          color: white;
          padding: 1rem;
          border-radius: 0.5rem;
          text-align: center;
          margin-top: 1rem;
          font-weight: 600;
        `;

        // Preparar datos para Sendy
        const data = {
          api_key: apiKey,
          list: formId,
          ...Object.fromEntries(formData),
          boolean: 'true',
        };

        // Deshabilitar botón durante el envío
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Enviando...';
        }

        try {
          const response = await fetch(
            'https://sendy.todoconta.com/subscribe',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
              },
              body: new URLSearchParams(data),
            }
          );

          const responseText = await response.text();

          // Remover mensajes anteriores
          form
            .querySelectorAll('.success-message, .error-message')
            .forEach(msg => msg.remove());

          if (responseText === '1') {
            successMessage.textContent =
              '¡Te has suscrito con éxito! 🎉 Revisa tu correo para descargar el demo.';
            form.appendChild(successMessage);
            form.reset();
          } else if (responseText === 'Already subscribed.') {
            errorMessage.textContent =
              'Parece que ya te habías suscrito antes 🤔';
            form.appendChild(errorMessage);
          } else {
            errorMessage.textContent = `Error: ${responseText}`;
            form.appendChild(errorMessage);
          }
        } catch (error) {
          console.error('Error subscribing user:', error);
          form
            .querySelectorAll('.success-message, .error-message')
            .forEach(msg => msg.remove());
          errorMessage.textContent =
            'Ocurrió un error al suscribirte, intenta más tarde';
          form.appendChild(errorMessage);
        } finally {
          // Rehabilitar botón
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = 'Descargar Demo';
          }
        }
      });
    }
  });
</script>

<style>
  .demo-section {
    background-color: var(--demo-bg-color);
    padding: var(--space-16) 0;
    border-radius: var(--border-radius-3xl);
    margin: var(--space-16) 0;
  }

  .demo-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 600px;
    margin: 0 auto;
    text-align: center;
  }

  .demo-form {
    width: 100%;
    max-width: 450px;
    background-color: var(--color-white);
    padding: var(--space-8);
    border-radius: var(--border-radius-xl);
    box-shadow: var(--shadow-lg);
    margin-bottom: var(--space-6);
  }

  .form-group {
    margin-bottom: var(--space-4);
  }

  .form-input {
    width: 100%;
    padding: var(--space-4);
    border: 1px solid var(--neutral-300);
    border-radius: var(--border-radius-lg);
    font-family: var(--font-primary);
    font-size: var(--font-size-base);
    transition: border-color var(--transition-fast);
  }

  .form-input:focus {
    outline: none;
    border-color: var(--primary-400);
    box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.15);
  }

  .form-button {
    width: 100%;
    padding: var(--space-4);
    background-color: var(--demo-button-color);
    color: var(--color-white);
    border: none;
    border-radius: var(--border-radius-lg);
    font-family: var(--font-secondary);
    font-size: var(--font-size-base);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-normal);
  }

  .form-button:hover {
    filter: brightness(1.1);
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  .form-disclaimer {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    max-width: 450px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .demo-section {
      border-radius: var(--border-radius-2xl);
      margin: var(--space-10) 0;
      padding: var(--space-10) 0;
    }

    .demo-form {
      padding: var(--space-6);
    }
  }
</style>
