---
// Definir las estadísticas que queremos mostrar
const stats = [
  {
    number: "500+",
    label: "Empresas Atendidas"
  },
  {
    number: "2,500+",
    label: "Consultas Online"
  },
  {
    number: "70%",
    label: "Menos Tiempo Manual"
  },
  {
    number: "98.5%",
    label: "Sin Multas Fiscales"
  },
  {
    number: "15+",
    label: "Años de Experiencia"
  }
];
---

<section class="stats-section">
  <div class="stats-background"></div>
  <div class="container">
    <div class="stats-grid">
      {stats.map((stat, index) => (
        <div class="stat-item fade-in-up" style={`animation-delay: ${index * 0.15}s`}>
          <div class="stat-number" data-count={stat.number.replace(/\D/g, '')}>
            {stat.number}
          </div>
          <div class="stat-label">{stat.label}</div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .stats-section {
    background: var(--color-primary);
    color: white;
    padding: var(--space-20) 0;
    position: relative;
    overflow: hidden;
  }

  .stats-background {
    position: absolute;
    inset: 0;
    background-image: radial-gradient(circle at 20% 30%, rgba(255, 255, 255, 0.1) 0%, transparent 10%),
                      radial-gradient(circle at 80% 70%, rgba(255, 255, 255, 0.1) 0%, transparent 10%);
    opacity: 0.6;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-6);
    position: relative;
    z-index: 1;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-8);
    text-align: center;
  }

  .stat-item {
    padding: var(--space-6);
    position: relative;
    transition: all var(--transition-normal);
  }

  .stat-item::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
    transition: all var(--transition-normal);
  }

  .stat-item:hover::after {
    width: 100px;
    background: rgba(255, 255, 255, 0.6);
  }

  .stat-item:hover {
    transform: translateY(-5px);
  }

  .stat-number {
    font-family: var(--font-secondary);
    font-size: var(--font-size-5xl);
    font-weight: 800;
    color: white;
    margin-bottom: var(--space-2);
    line-height: 1;
    position: relative;
    display: inline-block;
  }

  .stat-number::before {
    content: '';
    position: absolute;
    top: -15px;
    left: -15px;
    width: 30px;
    height: 30px;
    border-top: 3px solid rgba(255, 255, 255, 0.3);
    border-left: 3px solid rgba(255, 255, 255, 0.3);
    opacity: 0;
    transition: all var(--transition-normal);
  }

  .stat-number::after {
    content: '';
    position: absolute;
    bottom: -15px;
    right: -15px;
    width: 30px;
    height: 30px;
    border-bottom: 3px solid rgba(255, 255, 255, 0.3);
    border-right: 3px solid rgba(255, 255, 255, 0.3);
    opacity: 0;
    transition: all var(--transition-normal);
  }

  .stat-item:hover .stat-number::before,
  .stat-item:hover .stat-number::after {
    opacity: 1;
  }

  .stat-label {
    font-size: var(--font-size-lg);
    color: rgba(255, 255, 255, 0.9);
    font-weight: 500;
  }

  /* Animaciones */
  .fade-in-up {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s ease;
  }

  .fade-in-up.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .stats-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--space-6);
    }
  }

  @media (max-width: 480px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }

    .stat-number {
      font-size: var(--font-size-4xl);
    }
  }
</style>

<script>
  // Script para animación opcional de conteo (si lo deseas)
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Añade clase para animación CSS
          entry.target.classList.add('visible');
          
          // Si quieres implementar animación de contador numérico
          // (opcional, puedes remover esta parte si prefieres solo la animación CSS)
          if (entry.target.classList.contains('stat-item')) {
            const numberElement = entry.target.querySelector('.stat-number');
            if (numberElement) {
              const finalValue = numberElement.dataset.count || 0;
              animateCounter(numberElement, 0, parseInt(finalValue), 1500);
            }
          }
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Observar elementos con animación
    document.querySelectorAll('.fade-in-up').forEach(el => observer.observe(el));
    
    // Función para animar contador (opcional)
    function animateCounter(element, start, end, duration) {
      let startTimestamp = null;
      const originalText = element.textContent;
      const hasPlus = originalText.includes('+');
      const hasPercentage = originalText.includes('%');
      
      // Si el valor no es un número simple, no animamos
      if (isNaN(end)) return;
      
      const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const currentValue = Math.floor(progress * (end - start) + start);
        
        let formattedValue = currentValue.toLocaleString();
        if (hasPlus) formattedValue += '+';
        if (hasPercentage) formattedValue += '%';
        
        element.textContent = formattedValue;
        
        if (progress < 1) {
          window.requestAnimationFrame(step);
        } else {
          element.textContent = originalText; // Restaura el texto original al final
        }
      };
      
      window.requestAnimationFrame(step);
    }
  });
</script>