---
export interface Props {
  links?: Array<{
    title: string;
    url: string;
  }>;
  cta?: {
    title: string;
    link: string;
  };
  showPhone?: boolean;
}

const {
  links,
  cta,
  showPhone = false,
} = Astro.props as Props;
---

<header class="header">
  <nav class="nav container">
    <a href="/" class="logo">Todoconta</a>
    
    <div class="nav-links">
      {Array.isArray(links) && links.map((link) => (
        <a href={link.url} class={"nav-link"}>{link.title}</a>
      ))}
    </div>
    
    <div class="nav-cta">
      {showPhone && <a href="tel:5544753602" class="nav-link phone-link">ðŸ“ž (55) 4475-3602</a>}
      {cta && <a href={cta.link} class="btn btn-primary">{cta.title}</a>}
    </div>
  </nav>
</header>

<style>
  .header {
    background: var(--color-white);
    border-bottom: 1px solid var(--color-border);
    padding: var(--space-4) 0;
    position: sticky;
    top: 0;
    z-index: 1000;
    backdrop-filter: blur(8px);
    background: rgba(255, 255, 255, 0.95);
  }

  .nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-6);
  }

  .logo {
    font-family: var(--font-secondary);
    font-size: 1.5rem;
    font-weight: 800;
    color: var(--color-primary);
    text-decoration: none;
    letter-spacing: -0.02em;
  }

  .nav-links {
    display: flex;
    align-items: center;
    gap: var(--space-8);
  }

  .nav-link {
    font-family: var(--font-secondary);
    font-size: 15px;
    font-weight: 500;
    color: var(--color-text-secondary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .nav-link:hover {
    color: var(--color-primary);
  }

  .nav-link.active {
    color: var(--color-primary);
    font-weight: 600;
  }

  .nav-cta {
    display: flex;
    align-items: center;
    gap: var(--space-4);
  }

  .phone-link {
    display: flex;
    align-items: center;
    white-space: nowrap;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-3) var(--space-6);
    font-family: var(--font-secondary);
    font-size: 15px;
    font-weight: 600;
    border-radius: var(--border-radius-md);
    border: 2px solid transparent;
    cursor: pointer;
    text-decoration: none;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .btn-primary {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }

  .btn-primary:hover {
    background: var(--color-primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(61, 64, 91, 0.3);
  }
  
  .btn-full {
    width: 100%;
    margin-top: var(--space-4);
  }

  /* Responsive Styles */
  @media (max-width: 768px) {
    .nav-links {
      display: none;
    }
    
    .nav-cta .nav-link {
      display: none;
    }
  }
</style>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => { 
    // Highlight active section in navigation
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    function highlightActiveSection() {
      const scrollPosition = window.scrollY + 100;
      
      sections.forEach((section) => {
        const sectionEl = section as HTMLElement;
        const sectionTop = sectionEl.offsetTop;
        const sectionHeight = sectionEl.offsetHeight;
        const sectionId = sectionEl.getAttribute('id');
        
        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          navLinks.forEach((link) => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${sectionId}`) {
              link.classList.add('active');
            }
          });
        }
      });
    }
    
    window.addEventListener('scroll', highlightActiveSection);
    highlightActiveSection();
  });
</script>